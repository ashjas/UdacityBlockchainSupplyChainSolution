// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 2
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[0]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    it("Adding proper addresses", async() => {
        const supplyChain = await SupplyChain.deployed()
        //await supplyChain.addFarmer(originFarmerID);
        await supplyChain.addDistributor(distributorID);
        await supplyChain.addRetailer(retailerID);
        await supplyChain.addConsumer(consumerID);
    })

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false    

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes,{from: originFarmerID})
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Harvested(upc)
        await event.watch((err, res) => {
            eventEmitted = true
        })
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var processedEvent = false;

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc,{from: originFarmerID});
        
        // Watch the emitted event Processed()
        var event = supplyChain.Processed(upc);
        await event.watch((err,res) => {
            processedEvent = true;
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(processedEvent, true, 'Invalid event emitted') 
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
       // Declare and Initialize a variable for event
       var packedEvent = false;

       // Mark an item as Processed by calling function processtItem()
       await supplyChain.packItem(upc,{from: originFarmerID});
       
       // Watch the emitted event Processed()
       var event = supplyChain.Packed(upc);
       await event.watch((err,res) => {
        packedEvent = true;
       })

       // Retrieve the just now saved item from blockchain by calling function fetchItem()
       const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
       const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

       // Verify the result set
       assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
       assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
       assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
       assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
       assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
       assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
       assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
       assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
       assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
       assert.equal(packedEvent, true, 'Invalid event emitted') 
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
       var forSaleEvent = false;

       // Mark an item as Processed by calling function processtItem()
       await supplyChain.sellItem(upc,productPrice,{from: originFarmerID});
       
       // Watch the emitted event Processed()
       var event = supplyChain.ForSale(upc);
       await event.watch((err,res) => {
        forSaleEvent = true;
       })

       // Retrieve the just now saved item from blockchain by calling function fetchItem()
       const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
       const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

       // Verify the result set
       assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
       assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
       assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
       assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
       assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
       assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
       assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
       assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
       assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
       assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item Price')
       assert.equal(forSaleEvent, true, 'Invalid event emitted')
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var soldEvent = false;

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc,{from: distributorID,value: productPrice, gasPrice: 0})
        // Watch the emitted event Sold()
        var event = supplyChain.Sold(upc)
        await event.watch((err,res) => {
            soldEvent = true;
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
       const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
       const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

       // Verify the result set
       assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
       assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
       assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
       assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
       assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
       assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
       assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
       assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
       assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
       assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item Price')
       assert.equal(soldEvent, true, 'Invalid event emitted')
        // Verify the result set
        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
       var shippedEvent = false;

       // Mark an item as Processed by calling function processtItem()
       await supplyChain.shipItem(upc,{from: distributorID});
       
       // Watch the emitted event Processed()
       var event = supplyChain.Shipped(upc);
       await event.watch((err,res) => {
        shippedEvent = true;
       })

       // Retrieve the just now saved item from blockchain by calling function fetchItem()
       const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
       const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

       // Verify the result set
       assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
       assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
       assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
       assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
       assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
       assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
       assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
       assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
       assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
       assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item Price')
       assert.equal(shippedEvent, true, 'Invalid event emitted')
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        var receivedEvent = false;
        await supplyChain.receiveItem(upc,{from: retailerID});
        var event = supplyChain.Received(upc);
        await event.watch((err,res) => {
        receivedEvent = true;
        })

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item Price')
        assert.equal(receivedEvent, true, 'Invalid event emitted')
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        var purchasedEvent = false;
        await supplyChain.purchaseItem(upc,{from: consumerID});
        var event = supplyChain.Purchased(upc);
        await event.watch((err,res) => {
        purchasedEvent = true;
        })

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item Price')
        assert.equal(purchasedEvent, true, 'Invalid event emitted')
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item ProductID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid ProductNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item Price')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributerID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')
    })

});

